apiVersion: builds.katanomi.dev/v1alpha1
kind: Build
spec:
  runTemplate:
    spec:
      workspaces:
      - name: source
        volumeClaimTemplate:
          spec:
            accessModes:
              - ReadWriteMany
            resources:
              requests:
                storage: 500Mi
  workspaces:
    - description: >
        This workspace is shared among all the pipeline tasks to read/write
        common resources
      name: source
  tasks:
    # generate-version
    - name: generate-version
      timeout: 5m
      retries: 1
      workspaces:
        - name: source
          workspace: source
      taskRef:
        kind: ClusterTask
        name: alauda-generate-version
      params:
        - name: repo-type
          value: gitlab
        - name: repo-url
          value: $(params.git-url)
        - name: repo-ref
          value: $(params.git-revision)
    - name: generate-chart-version
      runAfter:
        - generate-version
      timeout: 30m
      retries: 3
      taskRef:
        kind: ClusterTask
        name: alauda-generate-chart-version
      workspaces:
        - name: source
          workspace: source
      params:
        - name: chart-path
          value: ./deploy/chart/alb
        - name: branch
          value: $(tasks.generate-version.results.branch)
        - name: namespace
          value: acp
        - name: comfigmap-name
          value: alauda-gitlab-container-platform-alb2
    - name: alb-test
      runAfter:
        - generate-version
      retries: 3
      workspaces:
        - name: source
          workspace: source
      taskSpec:
        descriptifn: >
          run alb test
        workspaces:
          - name: source
            workspace: source
        steps:
          - image: build-harbor.alauda.cn/ops/golang:1.18-alpine3.15 # keep it as same as alb docker builder.
            name: build
            imagePullPolicy: IfNotPresent
            workingDir: '$(workspaces.source.path)'
            resources:
              requests:
                cpu: "4"
                memory: "4G"
              limits:
                cpu: "4"
                memory: "4G"              
            script: |
              #!/bin/sh
              scripts/go-test.sh
    - name: code-scan
      runAfter:
        - generate-version
        - alb-test
      workspaces:
        - name: source
          workspace: source
      timeout: 30m
      retries: 1
      taskRef:
        kind: ClusterTask
        name: sonarqube-analysis
      params:
        - name: server
          value: https://build-sonar.alauda.cn
        - name: scan-flags
          value:
            - 'sonar.projectVersion=$(tasks.generate-version.results.version)'
        - name: quality-gate-rules
          value:
            # 覆盖率允许下降值。 0 表示不允许降低
            - coverage-delta=10
            # 重复率允许上浮值。0 表示不允许上升
            - duplication-delta=10
    - name: alb-build
      runAfter:
        - generate-version
      timeout: 30m
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-build-image
      workspaces:
        - name: source
          workspace: source
      params:
        - name: container-image
          value: build-harbor.alauda.cn/acp/alb2
        - name: container-image-tag
          value: $(tasks.generate-version.results.version)
        - name: dockerfile
          value: ./Dockerfile
        - name: platform
          value:
            - linux/amd64
            - linux/arm64
        - name: tools-image
          value: registry.alauda.cn:60080/devops/builder-tools:v3.8-0-g377a3f9
        - name: verbose
          value: "true"
        - name: labels
          value:
          - commit=$(build.git.lastCommit.id)
          - branch=$(build.git.branch.name)
    - name: nginx-build
      runAfter:
        - generate-version
      timeout: 30m
      retries: 3
      taskRef:
        kind: ClusterTask
        name: alauda-build-image
      workspaces:
        - name: source
          workspace: source
      params:
        - name: container-image
          value: build-harbor.alauda.cn/acp/alb-nginx
        - name: container-image-tag
          value: $(tasks.generate-version.results.version)
        - name: dockerfile
          value: ./alb-nginx/Dockerfile
        - name: platform
          value:
            - linux/amd64
            - linux/arm64
        - name: tools-image
          value: registry.alauda.cn:60080/devops/builder-tools:v3.8-0-g377a3f9
        - name: verbose
          value: "true"
        - name: labels
          value:
          - commit=$(build.git.lastCommit.id)
          - branch=$(build.git.branch.name)
    # - name: nginx-test
    #   timeout: 30m
    #   retries: 3
    #   runAfter:
    #     - nginx-build
    #   params:
    #   - name: nginx-tag
    #     value: $(tasks.generate-version.results.version)
    #   workspaces:
    #     - name: source
    #       workspace: source
    #   taskSpec:
    #     description: >
    #       run nginx test
    #     workspaces:
    #       - name: source
    #         workspace: source
    #     params:
    #     - name: nginx-tag
    #       value: $(params.nginx-tag)
    #     steps:
    #       - image: build-harbor.alauda.cn/acp/alb-nginx:$(params.nginx-tag)
    #         name: build
    #         imagePullPolicy: IfNotPresent
    #         workingDir: '$(workspaces.source.path)'
    #         resources:
    #           requests:
    #             cpu: "4"
    #             memory: "4G"
    #           limits:
    #             cpu: "4"
    #             memory: "4G"              
    #         script: |
    #           #!/bin/sh
    #           scripts/nginx-test.sh
    - name: prepare-chart
      runAfter:
        - generate-version
        - generate-chart-version
      timeout: 30m
      retries: 1
      workspaces:
        - name: source
          workspace: source
      params:
      - name: version 
        value: $(tasks.generate-chart-version.results.version)
      - name: image_tag
        value: $(tasks.generate-version.results.version)
      taskSpec:
        description: >
          parepare operator bundle and chart
        steps:
          - image: registry.alauda.cn:60080/devops/builder-tools:v3.8-0-g377a3f9
            name: operator
            imagePullPolicy: IfNotPresent
            workingDir: '$(workspaces.source.path)'
            params:
              - name: version 
                value: "$(params.version)"
              - name: image_tag
                value: "$(params.image_tag)"
            script: |
              #!/bin/bash
              apt update;apt install tree
              export OPERATOR_IMAGE="build-harbor.alauda.cn/acp/alb2:$(params.image_tag)"
              export OPERATOR_VERSION="$(params.version)"
              env
              source ./scripts/alb-deploy-actions.sh
              alb-deploy-build-alb-and-operator
        workspaces:
          - name: source
            workspace: source
    - name: build-alb-chart
      runAfter:
        - prepare-chart
        # - nginx-test
        # - alb-test
      timeout: 5m
      taskRef:
        kind: ClusterTask
        name: alauda-build-oci-chart-update
      workspaces:
        - name: source
          workspace: source
      params:
        - name: dir
          value: ./deploy/chart/alb
        - name: address
          value: build-harbor.alauda.cn/acp/chart-alauda-alb2
        - name: version
          value: $(tasks.generate-chart-version.results.version)
        - name: branch
          value: $(tasks.generate-version.results.branch)
        - name: git-revision
          value: $(params.git-revision)
        - name: image-tag
          value: $(tasks.generate-version.results.version),$(tasks.generate-version.results.version)
        - name: values-path
          value: global.images.alb2.tag,global.images.nginx.tag
        - name: commit
          value:  $(tasks.generate-version.results.commit-id)
    - name: commit-push
      taskRef:
        name: alauda-git-commit-push
        kind: ClusterTask
      runAfter:
        - build-alb-chart
        - alb-test
      params:
      - name: branch
        value: $(tasks.generate-version.results.branch)
      workspaces:
        - name: source
          workspace: source
      when:
      - input: "true"
        operator: in
        values:
          - "$(tasks.generate-version.results.is-custom-release-branch)"
          - "$(tasks.generate-version.results.is-release-branch)"
          - "$(tasks.generate-version.results.is-main-branch)"
    - name: alauda-release-tag
      runAfter:
        - commit-push
      when:
       # only in release or custom release branches
        - input: "true"
          operator: in
          values:
          - "$(tasks.generate-version.results.is-custom-release-branch)"
          - "$(tasks.generate-version.results.is-release-branch)"
      timeout: 30m
      retries: 3
      taskRef:
        kind: ClusterTask
        name: alauda-release-tag
      workspaces:
        - name: source
          workspace: source
      params:
        - name: verbose
          value: "true"
        - name: base-image
          value: build-harbor.alauda.cn/devops/builder-tools:ubuntu-v3.6-14-g56f12fa
        - name: version
          value: $(tasks.generate-version.results.version)
        - name: git-user-name
          value: Alauda Bot
        - name: git-user-email
          value: alaudabot@alauda.io
