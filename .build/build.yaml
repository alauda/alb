apiVersion: builds.katanomi.dev/v1alpha1
kind: Build
spec:
  runTemplate:
    spec:
      workspaces:
      - name: source
        volumeClaimTemplate:
          spec:
            accessModes:
              - ReadWriteMany
            resources:
              requests:
                storage: 500Mi
  workspaces:
    - description: >
        This workspace is shared among all the pipeline tasks to read/write
        common resources
      name: source
  tasks:
    - name: kind-test 
      runAfter:
        - build-alb-chart
      params:
      - name: version 
        value: $(build.git.version.short)
      - name: branch
        value: $(build.git.branch.name)
      retries: 3
      workspaces:
        - name: source
          workspace: source
      taskSpec:
        descriptifn: >
          run alb kind e2e test
        workspaces:
          - name: source
            workspace: source
        steps:
          - image: build-harbor.alauda.cn/ops/golang:1.18-alpine3.15 # keep it as same as alb docker builder.
            name: build
            imagePullPolicy: IfNotPresent
            workingDir: '$(workspaces.source.path)'
            params:
              - name: version 
                value: "$(params.version)"
              - name: branch
                value: "$(params.branch)"
            resources:
              requests:
                cpu: "1"
                memory: "1G"
              limits:
                cpu: "4"
                memory: "4G"              
            script: |
              #!/bin/sh
              sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories
              apk update
              apk add bash openssh-client sshpass git
              ls
              env
              pwd
              export ALB_KIND_E2E_BRANCH=$(params.branch)
              export ALB_KIND_E2E_CHART=$(params.version)
              echo "branch  is  $ALB_KIND_E2E_BRANCH. version is $ALB_KIND_E2E_CHART"
              bash ./scripts/kind-e2e.sh
    - name: alb-test
      retries: 3
      workspaces:
        - name: source
          workspace: source
      taskSpec:
        descriptifn: >
          run alb test
        workspaces:
          - name: source
            workspace: source
        steps:
          - image: build-harbor.alauda.cn/ops/golang:1.18-alpine3.15 # keep it as same as alb docker builder.
            name: build
            imagePullPolicy: IfNotPresent
            workingDir: '$(workspaces.source.path)'
            resources:
              requests:
                cpu: "4"
                memory: "4G"
              limits:
                cpu: "6"
                memory: "4G"              
            script: |
              #!/bin/sh
              scripts/go-test.sh
    - name: code-scan
      runAfter:
        - alb-test
      workspaces:
        - name: source
          workspace: source
      timeout: 30m
      retries: 1
      taskRef:
        kind: ClusterTask
        name: sonarqube-analysis
      params:
        - name: server
          value: https://build-sonar.alauda.cn
        - name: scan-flags
          value:
            - 'sonar.projectVersion=$(build.git.version.docker)'
        - name: quality-gate-rules
          value:
            # 覆盖率允许下降值。 0 表示不允许降低
            - coverage-delta=50
            # 重复率允许上浮值。0 表示不允许上升
            - duplication-delta=10
    - name: alb-build
      timeout: 30m
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-build-image
      workspaces:
        - name: source
          workspace: source
      params:
        - name: container-image
          value: build-harbor.alauda.cn/acp/alb2
        - name: container-image-tag
          value: $(build.git.version.docker)
        - name: dockerfile
          value: ./Dockerfile
        - name: platform
          value:
            - linux/amd64
            - linux/arm64
        - name: tools-image
          value: registry.alauda.cn:60080/devops/builder-tools:v3.8-0-g377a3f9
        - name: verbose
          value: "true"
        - name: labels
          value:
          - commit=$(build.git.lastCommit.id)
          - branch=$(build.git.branch.name)
    - name: nginx-build
      timeout: 30m
      retries: 3
      taskRef:
        kind: ClusterTask
        name: alauda-build-image
      workspaces:
        - name: source
          workspace: source
      params:
        - name: container-image
          value: build-harbor.alauda.cn/acp/alb-nginx
        - name: container-image-tag
          value: $(build.git.version.docker)
        - name: dockerfile
          value: ./template/Dockerfile
        - name: platform
          value:
            - linux/amd64
            - linux/arm64
        - name: tools-image
          value: registry.alauda.cn:60080/devops/builder-tools:v3.8-0-g377a3f9
        - name: verbose
          value: "true"
        - name: labels
          value:
          - commit=$(build.git.lastCommit.id)
          - branch=$(build.git.branch.name)
    - name: nginx-test
      timeout: 30m
      retries: 3
      runAfter:
        - nginx-build
      params:
      - name: nginx-tag
        value: $(build.git.version.docker)
      workspaces:
        - name: source
          workspace: source
      taskSpec:
        description: >
          run nginx test
        workspaces:
          - name: source
            workspace: source
        params:
        - name: nginx-tag
          value: $(params.nginx-tag)
        steps:
          - image: build-harbor.alauda.cn/acp/alb-nginx:$(params.nginx-tag)
            name: build
            imagePullPolicy: IfNotPresent
            workingDir: '$(workspaces.source.path)'
            securityContext:
              runAsNonRoot: false
              runAsUser: 0
            runAs: root
            resources:
              requests:
                cpu: "4"
                memory: "4G"
              limits:
                cpu: "4"
                memory: "4G"              
            script: |
              #!/bin/sh
              ./scripts/nginx-test.sh
    - name: prepare-chart
      timeout: 30m
      retries: 1
      workspaces:
        - name: source
          workspace: source
      params:
      - name: version 
        value: $(build.git.version.short)
      - name: image_tag
        value: $(build.git.version.docker)
      taskSpec:
        description: >
          parepare operator bundle and chart
        steps:
          - image: registry.alauda.cn:60080/devops/builder-tools:v3.8-0-g377a3f9
            name: operator
            imagePullPolicy: IfNotPresent
            workingDir: '$(workspaces.source.path)'
            params:
              - name: version 
                value: "$(params.version)"
              - name: image_tag
                value: "$(params.image_tag)"
            script: |
              #!/bin/bash
              apt update;apt install tree
              export OPERATOR_IMAGE="build-harbor.alauda.cn/acp/alb2:$(params.image_tag)"
              export OPERATOR_VERSION="$(params.version)"
              env
              source ./scripts/alb-deploy-actions.sh
              alb-deploy-build-alb-and-operator
        workspaces:
          - name: source
            workspace: source
    - name: build-alb-chart
      runAfter:
        - prepare-chart
        - nginx-test
        - alb-test
      timeout: 5m
      taskRef:
        kind: ClusterTask
        name: alauda-build-oci-chart-update
      workspaces:
        - name: source
          workspace: source
      params:
        - name: dir
          value: ./deploy/chart/alb
        - name: address
          value: build-harbor.alauda.cn/acp/chart-alauda-alb2
        - name: version
          value: $(build.git.version.short)
        - name: branch
          value: $(build.git.branch.name)
        - name: git-revision
          value: $(params.git-revision)
        - name: image-tag
          value: $(build.git.version.docker),$(build.git.version.docker)
        - name: values-path
          value: global.images.alb2.tag,global.images.nginx.tag
        - name: commit
          value:  $(build.git.lastCommit.id)
    - name: commit-push
      taskRef:
        name: alauda-git-commit-push
        kind: ClusterTask
      runAfter:
        - build-alb-chart
        - alb-test
        - kind-test
      params:
      - name: branch
        value: $(build.git.branch.name)
      workspaces:
        - name: source
          workspace: source
      when:
      - input: "$(build.git.versionPhase)"
        operator: in
        values: ["custom", "ga", "beta"]
  finally:
  # Release tag
  - name: release-tag
    when:
      # only during releases
      - input: "$(build.git.versionPhase)"
        operator: in
        values: ["custom", "ga"]
      # all tasks must succeed
      - input: $(tasks.status)
        operator: in
        values: ["Succeeded", "Completed"]
    timeout: 30m
    retries: 1
    taskRef:
      kind: ClusterTask
      name: alauda-release-tag
    workspaces:
      - name: source
        workspace: source
    params:
      - name: verbose
        value: "false"
      - name: version
        value: $(build.git.version.docker)
