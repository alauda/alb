/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "alauda.io/alb2/pkg/apis/alauda/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ALB2Lister helps list ALB2s.
type ALB2Lister interface {
	// List lists all ALB2s in the indexer.
	List(selector labels.Selector) (ret []*v1.ALB2, err error)
	// ALB2s returns an object that can list and get ALB2s.
	ALB2s(namespace string) ALB2NamespaceLister
	ALB2ListerExpansion
}

// aLB2Lister implements the ALB2Lister interface.
type aLB2Lister struct {
	indexer cache.Indexer
}

// NewALB2Lister returns a new ALB2Lister.
func NewALB2Lister(indexer cache.Indexer) ALB2Lister {
	return &aLB2Lister{indexer: indexer}
}

// List lists all ALB2s in the indexer.
func (s *aLB2Lister) List(selector labels.Selector) (ret []*v1.ALB2, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ALB2))
	})
	return ret, err
}

// ALB2s returns an object that can list and get ALB2s.
func (s *aLB2Lister) ALB2s(namespace string) ALB2NamespaceLister {
	return aLB2NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ALB2NamespaceLister helps list and get ALB2s.
type ALB2NamespaceLister interface {
	// List lists all ALB2s in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ALB2, err error)
	// Get retrieves the ALB2 from the indexer for a given namespace and name.
	Get(name string) (*v1.ALB2, error)
	ALB2NamespaceListerExpansion
}

// aLB2NamespaceLister implements the ALB2NamespaceLister
// interface.
type aLB2NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ALB2s in the indexer for a given namespace.
func (s aLB2NamespaceLister) List(selector labels.Selector) (ret []*v1.ALB2, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ALB2))
	})
	return ret, err
}

// Get retrieves the ALB2 from the indexer for a given namespace and name.
func (s aLB2NamespaceLister) Get(name string) (*v1.ALB2, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("alb2"), name)
	}
	return obj.(*v1.ALB2), nil
}
