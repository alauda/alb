/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "alauda.io/alb2/pkg/apis/alauda/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FrontendLister helps list Frontends.
type FrontendLister interface {
	// List lists all Frontends in the indexer.
	List(selector labels.Selector) (ret []*v1.Frontend, err error)
	// Frontends returns an object that can list and get Frontends.
	Frontends(namespace string) FrontendNamespaceLister
	FrontendListerExpansion
}

// frontendLister implements the FrontendLister interface.
type frontendLister struct {
	indexer cache.Indexer
}

// NewFrontendLister returns a new FrontendLister.
func NewFrontendLister(indexer cache.Indexer) FrontendLister {
	return &frontendLister{indexer: indexer}
}

// List lists all Frontends in the indexer.
func (s *frontendLister) List(selector labels.Selector) (ret []*v1.Frontend, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Frontend))
	})
	return ret, err
}

// Frontends returns an object that can list and get Frontends.
func (s *frontendLister) Frontends(namespace string) FrontendNamespaceLister {
	return frontendNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FrontendNamespaceLister helps list and get Frontends.
type FrontendNamespaceLister interface {
	// List lists all Frontends in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Frontend, err error)
	// Get retrieves the Frontend from the indexer for a given namespace and name.
	Get(name string) (*v1.Frontend, error)
	FrontendNamespaceListerExpansion
}

// frontendNamespaceLister implements the FrontendNamespaceLister
// interface.
type frontendNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Frontends in the indexer for a given namespace.
func (s frontendNamespaceLister) List(selector labels.Selector) (ret []*v1.Frontend, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Frontend))
	})
	return ret, err
}

// Get retrieves the Frontend from the indexer for a given namespace and name.
func (s frontendNamespaceLister) Get(name string) (*v1.Frontend, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("frontend"), name)
	}
	return obj.(*v1.Frontend), nil
}
