user  nginx;
worker_rlimit_nofile 100000;
worker_processes     auto;
worker_cpu_affinity  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

env SYNC_POLICY_INTERVAL;
env SYNC_BACKEND_INTERVAL;
env NEW_POLICY_PATH;
env DEFAULT-SSL-STRATEGY;
env INGRESS_HTTPS_PORT;

events {
    multi_accept        on;
    worker_connections  51200;
}

# Name: {{.Name}}
# Hash: {{.TweakHash}}

http {
    include       /usr/local/openresty/nginx/conf/mime.types;
    include       /alb/tweak/http.conf;

    log_format  http  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $upstream_status $upstream_addr $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
                      '"$gzip_ratio" $request_time $bytes_sent $request_length';
    access_log  /var/log/nginx/access.log  http buffer=16k flush=1s;
    rewrite_log on;

    init_by_lua_block {
            require "resty.core"
            require "init_l7"
            ok, res = pcall(require, "balancer")
            if not ok then
              error("require failed: " .. tostring(res))
            else
              balancer = res
            end
            require("metrics").init()
    }
    init_worker_by_lua_file /alb/template/nginx/lua/worker.lua;

    server {
        listen 1936;
        {{if $.EnableIPV6}}
        listen [::]:1936;
        {{end}}

        access_log off;

        location /status {
            stub_status;
        }

        location /metrics {
            content_by_lua_block {
                require("metrics").collect()
            }
        }

        location /policies {
            content_by_lua_file /alb/template/nginx/lua/policy.lua;
            client_body_buffer_size 5m;
            client_max_body_size 10m;
        }
    }

    {{range $port, $ft := .Frontends}}
    {{if eq $ft.Protocol "http"}}
    server {
        listen      {{$port}} default_server;
        {{if $.EnableIPV6}}
        listen      [::]:{{$port}} default_server;
        {{end}}
        server_name _;

        include       /alb/tweak/http_server.conf;

        location / {
            set $upstream default;
            set $rule_name "";
            set $backend_protocol http;

            rewrite_by_lua_file /alb/template/nginx/lua/l7_rewrite.lua;
            proxy_pass $backend_protocol://http_backend;

            {{if $.EnablePrometheus}}
            log_by_lua_block {
                require("metrics").log()
            }
            {{end}}
        }
    }

    {{end}}
    {{end}}

    {{range $port, $ft := .Frontends}}
    {{if eq $ft.Protocol "https"}}
    server {
        listen      {{$port}} ssl {{ if $.EnableHTTP2 }}http2{{ end }};
        {{if $.EnableIPV6}}
        listen      [::]:{{$port}} ssl {{ if $.EnableHTTP2 }}http2{{ end }};
        {{end}}
        server_name _;

        include       /alb/tweak/http_server.conf;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        ssl_certificate /alb/template/nginx/placeholder.crt;
        ssl_certificate_key /alb/template/nginx/placeholder.key;

        ssl_certificate_by_lua_file /alb/template/nginx/lua/cert.lua;

        location / {
            set $upstream default;
            set $rule_name "";
            set $backend_protocol http;

            rewrite_by_lua_file /alb/template/nginx/lua/l7_rewrite.lua;
            proxy_pass $backend_protocol://http_backend;
            {{if $.EnablePrometheus}}
            log_by_lua_block {
                require("metrics").log()
            }
            {{end}}
        }
    }
    {{end}}
    {{end}}

    upstream http_backend {
        server 0.0.0.1:1234;   # just an invalid address as a place holder

        balancer_by_lua_block {
            balancer.balance()
        }
        include       /alb/tweak/upstream.conf;
    }

}

stream {
    include       /alb/tweak/stream.conf;

    lua_add_variable $upstream;

    init_by_lua_block {
            require "resty.core"
            require "init_l4"
            ok, res = pcall(require, "balancer")
            if not ok then
              error("require failed: " .. tostring(res))
            else
              balancer = res
            end
    }
    init_worker_by_lua_file /alb/template/nginx/lua/worker.lua;

    {{range $port, $ft := .Frontends}}
    {{if eq $ft.Protocol "tcp"}}
    server {
        listen {{$port}};
        {{if $.EnableIPV6}}
        listen [::]:{{$port}};
        {{end}}

        preread_by_lua_file /alb/template/nginx/lua/l4_preread.lua;
        proxy_pass tcp_backend;
    }
    {{end}}
    {{end}}

    upstream tcp_backend {
        server 0.0.0.1:1234;   # just an invalid address as a place holder

        balancer_by_lua_block {
            balancer.balance()
        }
    }
}
