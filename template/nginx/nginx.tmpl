user  nginx;
worker_rlimit_nofile 100000;
worker_processes     auto;
worker_cpu_affinity  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

env OLD_POLICY_PATH;

events {
    multi_accept        on;
    worker_connections  51200;
    use                 epoll;
}


http {
    include       /usr/local/openresty/nginx/conf/mime.types;
    include       /alb/tweak/http.conf;
    default_type  application/octet-stream;

    log_format  http  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
                      '"$gzip_ratio" $request_time $bytes_sent $request_length';
    access_log  /var/log/nginx/access.log  http buffer=16k flush=1s;

    server {
        listen 1936;

        access_log off;
        location /admin {
            stub_status;
        }

        location /policies {
            content_by_lua_file /alb/template/nginx/lua/policy.lua;
            client_body_buffer_size 4m;
            client_max_body_size 4m;
        }
    }

    {{range $port, $ft := .Frontends }}
    {{if eq $ft.Protocol "http" -}}
    server {
        listen      {{$port}} default_server;
        server_name _;

        set $upstream default;

        rewrite_by_lua_file /alb/template/nginx/lua/redirect.lua;

        location / {
            proxy_pass http://$upstream;
        }
    }

    {{- end -}}
    {{- end -}}

    {{range $port, $ft := .Frontends -}}
    {{- if eq $ft.Protocol "https" }}
    {{- if ne $ft.CertificateID "" }}
    server {
        listen      {{$port}} ssl;
        server_name _;

        ssl on;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        ssl_certificate {{index $ft.CertificateFiles $ft.CertificateID}};
        ssl_certificate_key {{index $ft.CertificateFiles $ft.CertificateID}};

        set $upstream default;
        rewrite_by_lua_file /alb/template/nginx/lua/redirect.lua;

        location / {
            proxy_pass http://$upstream;
        }
    }
    {{- end -}}
    {{- end -}}
    {{- end -}}

    {{- range $idx, $bg := .BackendGroup}}
    {{- if eq $bg.Mode "http" "https"}}

    upstream {{$bg.Name}} {
        {{- if eq $bg.SessionAffinityPolicy "sip-hash" }}
        ip_hash;
        {{ end -}}

        {{- if eq $bg.SessionAffinityPolicy "cookie"}}
        {{- if $bg.SessionAffinityAttribute }}
        sticky name={{$bg.SessionAffinityAttribute}};
        {{ else -}}
        sticky;
        {{ end -}}
        {{- end}}

        {{- range $j, $be := $bg.Backends }}
        server {{$be.Address}}:{{$be.Port}} weight={{$be.Weight}};
        {{- end}}

        include       /alb/tweak/upstream.conf;
    }
    {{- end}}
    {{- end}}
}

stream {
    include       /alb/tweak/stream.conf;

    {{- range $port, $ft := .Frontends}}
    {{- if eq $ft.Protocol "tcp"}}
    server {
        listen {{$port}};
        proxy_pass {{$ft.BackendGroup.Name}};
    }
    {{- end}}
    {{- end}}

    {{- range $idx, $bg := .BackendGroup}}
    {{- if eq $bg.Mode "tcp"}}

    upstream {{$bg.Name}} {
        {{- range $j, $be := $bg.Backends }}
        server {{$be.Address}}:{{$be.Port}} weight={{$be.Weight}};
        {{- end}}
    }
    {{- end}}
    {{- end}}
}
