{{ $cfg := .NginxParam }}
worker_rlimit_nofile 100000;
worker_processes     {{.CPUNum}};
worker_cpu_affinity  auto;
worker_shutdown_timeout 240s;

error_log  stderr   notice;
pid        /etc/alb2/nginx/nginx.pid;

env SYNC_POLICY_INTERVAL;
env CLEAN_METRICS_INTERVAL;
env SYNC_BACKEND_INTERVAL;
env NEW_POLICY_PATH;
env DEFAULT-SSL-STRATEGY;
env DEFAULT_SSL_STRATEGY;
env INGRESS_HTTPS_PORT;
env POLICY_ZIP;

events {
    multi_accept        on;
    worker_connections  51200;
}

# Name: {{.Name}}
# Hash: {{.TweakHash}}

http {
    include       /usr/local/openresty/nginx/conf/mime.types;
    include       /alb/tweak/http.conf;

    {{ if $cfg.EnableGzip }}
    gzip on;
    gzip_comp_level {{ $cfg.GzipLevel }};
    gzip_http_version 1.1;
    gzip_min_length {{ $cfg.GzipMinLength}};
    gzip_types {{ $cfg.GzipTypes }};
    gzip_proxied any;
    gzip_vary on;
    {{ end }}

    init_by_lua_block {
            require "resty.core"
            ok, res = pcall(require, "balancer")
            if not ok then
                error("require failed: " .. tostring(res))
            else
                balancer = res
            end
            require("metrics").init()
    }
    init_worker_by_lua_file /alb/nginx/lua/worker.lua;

    {{if eq $.Phase "running"}}
    server {
        {{range $address := .Metrics.IpV4BindAddress}}
            listen     {{$address}}:{{$.Metrics.Port}};
        {{end}}

        {{range $address := .Metrics.IpV6BindAddress}}
            listen     {{$address}}:{{$.Metrics.Port}};
        {{end}}


        access_log off;

        location /status {
            stub_status;
        }

        location /metrics {
            content_by_lua_block {
                require("metrics").collect()
            }
        }

        location /clear {
            content_by_lua_block {
                require("metrics").clear()
            }
        }
    }
    {{end}}

    {{range $_, $ft := .Frontends}}
    {{if eq $ft.Protocol "http"}}
    server {
        {{range $address := $ft.IpV4BindAddress}}
            listen     {{$address}}:{{$ft.Port}} backlog={{$cfg.Backlog}} default_server;
        {{end}}

        {{range  $address := $ft.IpV6BindAddress}}
            listen     {{$address}}:{{$ft.Port}} backlog={{$cfg.Backlog}} default_server;
        {{end}}
        server_name _;

        include       /alb/tweak/http_server.conf;

        location / {
            set $upstream default;
            set $rule_name "";
            set $backend_protocol http;

            rewrite_by_lua_file /alb/nginx/lua/l7_rewrite.lua;
            proxy_pass $backend_protocol://http_backend;
            header_filter_by_lua_file /alb/nginx/lua/l7_header_filter.lua;

            {{if $cfg.EnablePrometheus}}
            log_by_lua_block {
                require("metrics").log()
            }
            {{end}}
        }
    }

    {{end}}
    {{end}}

    {{range $_, $ft := .Frontends}}
    {{if eq $ft.Protocol "https"}}
    server {

        {{range $address := $ft.IpV4BindAddress}}
            listen     {{$address}}:{{$ft.Port}} ssl {{ if $cfg.EnableHTTP2 }}http2{{ end }} backlog={{$cfg.Backlog}};
        {{end}}

        {{range $address := $ft.IpV6BindAddress}}
            listen     {{$address}}:{{$ft.Port}} ssl {{ if $cfg.EnableHTTP2 }}http2{{ end }} backlog={{$cfg.Backlog}};
        {{end}}

        server_name _;

        include       /alb/tweak/http_server.conf;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        ssl_certificate /alb/nginx/placeholder.crt;
        ssl_certificate_key /alb/nginx/placeholder.key;
        ssl_dhparam /etc/alb2/nginx/dhparam.pem;
        ssl_certificate_by_lua_file /alb/nginx/lua/cert.lua;

        location / {
            set $upstream default;
            set $rule_name "";
            set $backend_protocol http;

            rewrite_by_lua_file /alb/nginx/lua/l7_rewrite.lua;
            proxy_pass $backend_protocol://http_backend;
            header_filter_by_lua_file /alb/nginx/lua/l7_header_filter.lua;

            {{if $cfg.EnablePrometheus}}
            log_by_lua_block {
                require("metrics").log()
            }
            {{end}}
        }
    }
    {{end}}
    {{end}}

    {{range $_, $ft := .Frontends}}
    {{if (and (eq $ft.Protocol "grpc") (eq $ft.CertificateName "")) }}
    server {
        {{range $address := $ft.IpV4BindAddress}}
            listen     {{$address}}:{{$ft.Port}} http2;
        {{end}}

        {{range  $address := $ft.IpV6BindAddress}}
            listen     {{$address}}:{{$ft.Port}} http2;
        {{end}}

        include       /alb/tweak/grpc_server.conf;

        location / {
            set $upstream default;
            set $backend_protocol grpc;

            rewrite_by_lua_file /alb/nginx/lua/l7_rewrite.lua;
            grpc_pass  $backend_protocol://http_backend;
            # could add http_header_filter/http_body_filter

            {{if $cfg.EnablePrometheus}}
            log_by_lua_block {
                require("metrics").log()
            }
            {{end}}
        }
    }
    {{end}}
    {{end}}

    {{range $_, $ft := .Frontends}}
    {{if (and (eq $ft.Protocol "grpc") (ne $ft.CertificateName "")) }}
    server {
        {{range $address := $ft.IpV4BindAddress}}
            listen     {{$address}}:{{$ft.Port}} ssl http2;
        {{end}}

        {{range  $address := $ft.IpV6BindAddress}}
            listen     {{$address}}:{{$ft.Port}} ssl http2;
        {{end}}

        include       /alb/tweak/grpc_server.conf;

        ssl_certificate /alb/nginx/placeholder.crt;
        ssl_certificate_key /alb/nginx/placeholder.key;
        ssl_dhparam /etc/alb2/nginx/dhparam.pem;
        ssl_certificate_by_lua_file /alb/nginx/lua/cert.lua;

        location / {
            set $upstream default;
            set $backend_protocol grpc;

            rewrite_by_lua_file /alb/nginx/lua/l7_rewrite.lua;
            grpc_pass  $backend_protocol://http_backend;
            # could add http_header_filter/http_body_filter

            {{if $cfg.EnablePrometheus}}
            log_by_lua_block {
                require("metrics").log()
            }
            {{end}}
        }
    }
    {{end}}
    {{end}}

    upstream http_backend {
        server 0.0.0.1:1234;   # just an invalid address as a place holder

        balancer_by_lua_block {
            balancer.balance()
        }
        include       /alb/tweak/upstream.conf;
    }

}

stream {
    include       /alb/tweak/stream-common.conf;

    lua_add_variable $upstream;

    init_by_lua_block {
            require "resty.core"
            ok, res = pcall(require, "balancer")
            if not ok then
                error("require failed: " .. tostring(res))
            else
                balancer = res
            end
    }
    init_worker_by_lua_file /alb/nginx/lua/worker.lua;

    {{range $_, $ft := .Frontends}}
    {{if eq $ft.Protocol "tcp"}}
    server {
        include       /alb/tweak/stream-tcp.conf;
        {{range  $address := $ft.IpV4BindAddress}}
            listen     {{$address}}:{{$ft.Port}};
        {{end}}

        {{range  $address := $ft.IpV6BindAddress}}
            listen     {{$address}}:{{$ft.Port}} ;
        {{end}}

        preread_by_lua_file /alb/nginx/lua/l4_preread.lua;
        proxy_pass stream_backend;
    }
    {{end}}
    {{end}}


    {{range $port, $ft := .Frontends}}
    {{if eq $ft.Protocol "udp"}}
    server {
        include       /alb/tweak/stream-udp.conf;
        {{range  $address := $ft.IpV4BindAddress}}
            listen     {{$address}}:{{$ft.Port}} udp;
        {{end}}

        {{range  $address := $ft.IpV6BindAddress}}
            listen     {{$address}}:{{$ft.Port}} udp;
        {{end}}

        preread_by_lua_file /alb/nginx/lua/l4_preread.lua;
        proxy_pass stream_backend;
    }
    {{end}}
    {{end}}


    upstream stream_backend {
        server 0.0.0.1:1234;   # just an invalid address as a place holder

        balancer_by_lua_block {
            balancer.balance()
        }
    }
}
