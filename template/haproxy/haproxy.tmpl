# This file uses golang text templates (http://golang.org/pkg/text/template/) to
# dynamically configure the haproxy loadbalancer.
global
    daemon
    nbproc 1
    maxconn  51200
    log 127.0.0.1 len 65535 local3
    log 127.0.0.1 len 65535 local4 warning

defaults
    log global

    # Enable session redistribution in case of connection failure.
    option redispatch

    # Disable logging of null connections (haproxy connections like checks).
    # This avoids excessive logs from haproxy internals.
    option dontlognull

    # Enable close abort request
    # https://cbonte.github.io/haproxy-dconv/1.6/configuration.html#4-option%20abortonclose
    option abortonclose

    # Enable HTTP keep-alive from client to server.
    option http-keep-alive

    # Clients should send their full http request in 5s.
    timeout http-request    10s

    # Maximum time to wait for a connection attempt to a server to succeed.
    timeout connect         5s

    # Maximum inactivity time on the client side.
    # Applies when the client is expected to acknowledge or send data.
    timeout client          50s

    # https://github.com/openshift/origin/issues/9640
    # https://github.com/openshift/origin/pull/14220
    timeout client-fin      1s
    timeout server-fin      1s

    # Maximum inactivity time on the server side.
    timeout server          50s

    # timeout to use with WebSocket and CONNECT
    timeout tunnel          15m

    # Maximum allowed time to wait for a new HTTP request to appear.
    timeout http-keep-alive 300s

    # default traffic mode is http
    # mode is overwritten in case of tcp services
    mode http
    maxconn 51200
    option httplog
    option log-separate-errors

# haproxy stats, required hostport and firewall rules for :1936
{{$bindAddress := .BindAddress}}
listen stats
    bind {{$bindAddress}}:1936
    stats enable
    stats refresh 10s
    stats hide-version
    stats realm Alauda Load Balancer\ Statistics
    stats uri /admin
    stats auth mathilde:Mathilde1861

{{range $port, $ft := .Frontends}}
frontend {{$ft.Protocol}}_{{$port}}
    bind {{$bindAddress}}:{{$port}}{{" "}}
    {{- if eq $ft.Protocol "http" "https" -}}
        {{- if eq $ft.Protocol "https" -}}
            ssl {{range $id, $certPath := $ft.CertificateFiles}}crt {{$certPath}} {{end}}
        {{- end}}
    option forwardfor
        {{if $.RecordPostBody -}}
    option http-buffer-request
    declare capture request len 65535
    http-request capture req.body id 0
        {{- end}}
    http-request set-header Host default:{{$port}} unless { hdr(Host) -m found }
    http-request set-header X-Full-Base %[base]
    http-request set-header X-Full-Base %[base]?%[query] if { query -m found }
        {{range $idx, $rule := $ft.Rules}}
    acl acl_{{$rule.RuleID}} hdr_reg(X-Full-Base) -i {{$rule.Regexp}}
    use_backend backend_{{$rule.BackendGroup.Name}} if acl_{{$rule.RuleID}}
        {{- end}}
        {{- if $ft.BackendGroup }}
    default_backend backend_{{$ft.BackendGroup.Name}}
        {{- end}}
    {{else}}
    mode tcp
    option tcplog
    use_backend backend_{{$ft.BackendGroup.Name}}
    {{- end}}
{{end}}

{{range $idx, $bg := .BackendGroup -}}
backend backend_{{$bg.Name}}
    balance roundrobin
    mode {{$bg.Mode}}
    {{if eq $bg.SessionAffinityPolicy "sip-hash" -}}
    stick-table type ip size 100k expire 30m
    stick on src
    {{- end}}
    {{- if eq $bg.SessionAffinityPolicy "cookie" -}}
        {{- if $bg.SessionAffinityAttribute }}
    cookie {{$bg.SessionAffinityAttribute}} prefix nocache
        {{- else }}
    cookie SERVERID insert indirect nocache
        {{- end -}}
    {{- end}}

    {{- range $j, $be := $bg.Backends }}
    server s_{{$be.Name}} {{$be.Address}}:{{$be.Port}} check port {{$be.Port}} inter 1000 maxconn 51200 {{if eq $bg.Mode "http"}}{{if eq $bg.SessionAffinityPolicy "cookie"}}cookie s_{{$be.Name}}{{end}}{{end}} weight {{$be.Weight}}
    {{- end}}

{{end}}
